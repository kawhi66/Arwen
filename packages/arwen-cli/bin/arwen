#!/usr/bin/env node

const fs = require('fs-extra')
const yargs = require('yargs')
const {
    ErrorHandler
} = require('@arwen/arwen-utils')

yargs
    .command('$0', false, yargs => {}, argv => {
        console.log('hello arwen')
    }) // this is a hidden command
    .command(require('../create'))
    .command(['serve', 'start', 'dev'], 'launch the server in development mode', yargs => {
        return yargs
            .option('host', {
                alias: 'h',
                default: 'localhost',
                description: 'specify host',
                type: 'string'
            })
            .option('port', {
                alias: 'p',
                default: '3000',
                description: 'specify port',
                type: 'string'
            })
    }, argv => {
        process.env.ARWEN_HOST = argv.host
        process.env.ARWEN_PORT = argv.port

        const Service = require(`@arwen/${argv.type}-scripts`)
        new Service().run('serve')
    }, [verifyPkgConfig])
    .command(['build', 'pack'], 'compile and build', {}, argv => {
        const Service = require(`@arwen/${argv.type}-scripts`)
        new Service().run('build')
    }, [verifyPkgConfig])
    .command({
        command: 'test1',
        description: false,
        builder: {},
        handler: argv => {
            console.log(argv)
        },
        middle: [verifyPkgConfig] // WARNING: it won't work
    })
    .command('test2', false, {}, argv => {
        console.log(argv)
    }, [verifyPkgConfig])
    // .middleware(verifyPkgConfig) // global middleware
    .usage('Usage: arwen <command> [options]')
    .example('$0 create demo -t h_ui', 'generate h_ui project')
    .example('$0 serve', 'run the server for development environment')
    .example('$0 build', 'run the build for production environment')
    .epilog('https://kawhi.site')
    .alias('v', 'version')
    .fail((msg, err, yargs) => {
        if (err) {
            throw err
        }
    })
    .help()
    .argv

/**
 * @description async middleware to verify if the current work directory is an valid an arwen project
 * @description it should only work for command serve and build
 * @todo if don't exit manually, the process won't be interruptted no matter what does this middleware returns
 * @todo It doesn 't seem logical for a middleware
 */
function verifyPkgConfig(argv) {
    return fs.readJson('./package.json').then(({
        arwen
    }) => {
        if (arwen && arwen.type) {
            return {
                ...arwen,
                ...argv
            }
        } else {
            throw new ErrorHandler('INVALID_ARWEN_TYPE')
        }
    }).catch(err => {
        if (!err.isArwen) {
            err = new ErrorHandler('UNKNOWN_ERROR')
        }
        console.error(`${err.code}: ${err.message}`)
        yargs.exit(1, err)
    })
}
